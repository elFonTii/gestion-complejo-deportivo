{"version":3,"file":"ciuy.cjs.production.min.js","sources":["../src/clean.ts","../src/generate-validation-digit.ts","../src/random.ts","../src/validate-id-number.ts"],"sourcesContent":["/**\n * Remove any unnecessary characters from the input.\n * @param idNumber \n */\nexport const cleanIdNumber: (idNumber: string) => string = idNumber =>\n  idNumber.replace(/\\D/g, '');\n","/**\n * Given a valid uruguayan identification number,\n * generates it's validation/verification digit.\n * \n * @example generateValidationDigit('1111111') => 1\n *\n * @param idNumber The first 6 or 7 digits of the identification number.\n */\nexport const generateValidationDigit: (\n  idNumber: string | number\n) => number = idNumber => {\n  let ci = typeof idNumber === 'number' ? idNumber.toString() : idNumber;\n\n  if (ci.length <= 6) {\n    for (let i = ci.length; i < 7; i++) {\n      ci = '0' + ci;\n    }\n  }\n\n  return safeGenerateValidationDigit(ci);\n};\n\nconst safeGenerateValidationDigit: (idNumber: string) => number = idNumber => {\n  let ci = idNumber;\n  let sum = 0;\n\n  for (let i = 0; i < 7; i++) {\n    sum += (parseInt('2987634'[i]) * parseInt(ci[i])) % 10;\n  }\n\n  if (sum % 10 === 0) {\n    return 0;\n  }\n\n  return 10 - (sum % 10);\n};\n","import { generateValidationDigit } from './generate-validation-digit';\n\n/**\n * Generates a random, valid  uruguayan identification number.\n */\nexport const generateRandomNumber: () => string = () => {\n  const base = Math.floor(Math.random() * 10_000_000 + 1_000_000).toString();\n  return base.substring(0, 7) + generateValidationDigit(base);\n};\n","import { cleanIdNumber } from './clean';\nimport { generateValidationDigit } from './generate-validation-digit';\n\n/**\n * Given an uruguayan identification number, checks the number is valid or not\n * based on its length and validation digit.\n * @param idNumber Uruguayan Identification Number (CÃ©dula de Identidad - DNIC)\n */\nexport const validateIdentificationNumber: (\n  idNumber: string | number\n) => boolean = idNumber => {\n  const ci = typeof idNumber === 'number' ? idNumber.toString() : idNumber;\n\n  if (ci.length < 7 || ci.length > 8) {\n      return false;\n  }\n\n  const cleanNumber = cleanIdNumber(ci);\n  const possibleValidationDigit = parseInt(\n    cleanNumber[cleanNumber.length - 1],\n    10\n  );\n\n  const validableNumber = cleanNumber.replace(/[0-9]$/, '');\n  const actualValidationDigit = generateValidationDigit(validableNumber);\n\n  return possibleValidationDigit === actualValidationDigit;\n};\n"],"names":["cleanIdNumber","idNumber","replace","generateValidationDigit","ci","toString","length","i","safeGenerateValidationDigit","sum","parseInt","base","Math","floor","random","substring","cleanNumber","possibleValidationDigit","validableNumber"],"mappings":"wEAIaA,EAA8C,SAAAC,UACzDA,EAASC,QAAQ,MAAO,KCGbC,EAEC,SAAAF,OACRG,EAAyB,iBAAbH,EAAwBA,EAASI,WAAaJ,KAE1DG,EAAGE,QAAU,MACV,IAAIC,EAAIH,EAAGE,OAAQC,EAAI,EAAGA,IAC7BH,EAAK,IAAMA,SAIRI,EAA4BJ,IAG/BI,EAA4D,SAAAP,WAC5DG,EAAKH,EACLQ,EAAM,EAEDF,EAAI,EAAGA,EAAI,EAAGA,IACrBE,GAAQC,SAAS,UAAUH,IAAMG,SAASN,EAAGG,IAAO,UAGlDE,EAAM,IAAO,EACR,EAGF,GAAMA,EAAM,yDC7B6B,eAC1CE,EAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAwB,KAAWT,kBACzDM,EAAKI,UAAU,EAAG,GAAKZ,EAAwBQ,2ECGzC,SAAAV,OACPG,EAAyB,iBAAbH,EAAwBA,EAASI,WAAaJ,KAE5DG,EAAGE,OAAS,GAAKF,EAAGE,OAAS,SACtB,MAGLU,EAAchB,EAAcI,GAC5Ba,EAA0BP,SAC9BM,EAAYA,EAAYV,OAAS,GACjC,IAGIY,EAAkBF,EAAYd,QAAQ,SAAU,WAG/Ce,IAFuBd,EAAwBe"}